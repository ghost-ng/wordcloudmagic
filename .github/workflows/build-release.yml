name: Build Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write  # Required for creating releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: 'x64'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Download and setup UPX
      run: |
        # Download UPX
        $upxVersion = "4.2.2"
        $upxUrl = "https://github.com/upx/upx/releases/download/v$upxVersion/upx-$upxVersion-win64.zip"
        Invoke-WebRequest -Uri $upxUrl -OutFile "upx.zip"
        
        # Extract UPX
        Expand-Archive -Path "upx.zip" -DestinationPath "." -Force
        
        # Add UPX to PATH
        $upxPath = (Get-ChildItem -Path "." -Filter "upx-*-win64" -Directory).FullName
        echo "$upxPath" >> $env:GITHUB_PATH
        echo "UPX_DIR=$upxPath" >> $env:GITHUB_ENV
    
    - name: Get version from file
      id: get_version
      run: |
        # Read version from __version__.py
        $versionContent = Get-Content "__version__.py" -Raw
        if ($versionContent -match '__version__\s*=\s*"([^"]+)"') {
            $version = $matches[1]
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "Building version: $version"
        } else {
            echo "ERROR: Could not parse version from __version__.py"
            exit 1
        }
    
    - name: Update version in build script
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $versionParts = $version.Split('.')
        while ($versionParts.Count -lt 4) {
          $versionParts += "0"
        }
        $fileVersion = $versionParts -join ', '
        
        $content = Get-Content build_exe.py -Raw
        $content = $content -replace 'filevers=\(\d+, \d+, \d+, \d+\)', "filevers=($fileVersion)"
        $content = $content -replace 'prodvers=\(\d+, \d+, \d+, \d+\)', "prodvers=($fileVersion)"
        $content = $content -replace 'FileVersion", u"[\d\.]+"', "FileVersion`", u`"$version.0`""
        $content = $content -replace 'ProductVersion", u"[\d\.]+"', "ProductVersion`", u`"$version.0`""
        Set-Content build_exe.py $content -NoNewline
    
    - name: Build executable using existing spec
      run: |
        # Verify UPX is available
        upx --version
        
        # Use the existing spec file from repository with UPX
        pyinstaller wordcloud_app.spec --clean --noconfirm --upx-dir=$env:UPX_DIR
    
    - name: Create portable archive
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release/WordCloudMagic-$version-win64"
        
        # Copy executable
        Copy-Item "dist/WordCloudMagic.exe" "release/WordCloudMagic-$version-win64/"
        
        # Copy documentation
        Copy-Item "README.md" "release/WordCloudMagic-$version-win64/"
        
        # Create version info file
        @"
        WordCloud Magic v$version
        Built on: $(Get-Date -Format "yyyy-MM-dd")
        Platform: Windows x64
        "@ | Out-File -FilePath "release/WordCloudMagic-$version-win64/version.txt" -Encoding UTF8
        
        # Create zip archive
        Compress-Archive -Path "release/WordCloudMagic-$version-win64" -DestinationPath "WordCloudMagic-$version-win64.zip"
        
    - name: Create source code archive
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Create source directory
        New-Item -ItemType Directory -Force -Path "release/source"
        
        # Copy source files (excluding build artifacts and venv)
        $excludeDirs = @('.git', 'build', 'dist', '__pycache__', 'venv', 'release', '.github')
        $excludeFiles = @('*.pyc', '*.pyo', '*.log', '*.spec.bak')
        
        Get-ChildItem -Path . -Recurse | Where-Object {
            $item = $_
            $exclude = $false
            
            # Check if in excluded directory
            foreach ($dir in $excludeDirs) {
                if ($item.FullName -like "*\$dir\*" -or $item.Name -eq $dir) {
                    $exclude = $true
                    break
                }
            }
            
            # Check if excluded file pattern
            if (-not $exclude -and -not $item.PSIsContainer) {
                foreach ($pattern in $excludeFiles) {
                    if ($item.Name -like $pattern) {
                        $exclude = $true
                        break
                    }
                }
            }
            
            -not $exclude
        } | ForEach-Object {
            $relativePath = $_.FullName.Substring((Get-Location).Path.Length + 1)
            $destPath = Join-Path "release/source" $relativePath
            
            if ($_.PSIsContainer) {
                New-Item -ItemType Directory -Force -Path $destPath | Out-Null
            } else {
                $destDir = Split-Path $destPath -Parent
                if (-not (Test-Path $destDir)) {
                    New-Item -ItemType Directory -Force -Path $destDir | Out-Null
                }
                Copy-Item $_.FullName -Destination $destPath -Force
            }
        }
        
        # Create source zip
        Compress-Archive -Path "release/source/*" -DestinationPath "WordCloudMagic-$version-source.zip"
    
    - name: Calculate hashes
      id: hash
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Calculate exe hash
        $exeHash = Get-FileHash "WordCloudMagic-$version-win64.zip" -Algorithm SHA256
        echo "EXE_SHA256=$($exeHash.Hash)" >> $env:GITHUB_OUTPUT
        
        # Calculate source hash  
        $srcHash = Get-FileHash "WordCloudMagic-$version-source.zip" -Algorithm SHA256
        echo "SRC_SHA256=$($srcHash.Hash)" >> $env:GITHUB_OUTPUT
        
        # Create hash files
        "$($exeHash.Hash)  WordCloudMagic-$version-win64.zip" | Out-File -FilePath "WordCloudMagic-$version-win64.zip.sha256" -Encoding UTF8
        "$($srcHash.Hash)  WordCloudMagic-$version-source.zip" | Out-File -FilePath "WordCloudMagic-$version-source.zip.sha256" -Encoding UTF8
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-release
        path: |
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-win64.zip
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-win64.zip.sha256
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-source.zip
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-source.zip.sha256
    
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        name: WordCloud Magic ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## WordCloud Magic ${{ steps.get_version.outputs.VERSION }}
          
          ### Downloads
          - ðŸ“¦ **Windows Executable**: `WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-win64.zip`
          - ðŸ“„ **Source Code**: `WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-source.zip`
          
          ### Installation
          1. Download the Windows ZIP file
          2. Extract to your desired location
          3. Run `WordCloudMagic.exe`
          
          ### Build from Source
          1. Download and extract the source code
          2. Install Python 3.8+ and dependencies: `pip install -r requirements.txt`
          3. Run: `python wordcloud_app.py`
          
          ### Verification
          - Windows EXE SHA256: `${{ steps.hash.outputs.EXE_SHA256 }}`
          - Source Code SHA256: `${{ steps.hash.outputs.SRC_SHA256 }}`
          
          ### What's New
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
        files: |
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-win64.zip
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-win64.zip.sha256
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-source.zip
          WordCloudMagic-${{ steps.get_version.outputs.VERSION }}-source.zip.sha256
        draft: true
        prerelease: false